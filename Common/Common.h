#pragma once

#ifdef STITCHESAPI_EXPORTS
#include <winioctl.h>
#endif

#define KERNELDEVICE_DEVICE_NAME        L"Stitches"
#define KERNELDEVICE_DEVICE_FILE        L"\\\\.\\" KERNELDEVICE_DEVICE_NAME
#define FILE_DEVICE_KERNELCODE			0x8005

#define DEVICE_NAME			L"\\Device\\" KERNELDEVICE_DEVICE_NAME
#define SYMBOLICLINK_NAME	L"\\DosDevices\\" KERNELDEVICE_DEVICE_NAME




typedef struct _HOOK_DLL_PATH
{
	WCHAR x64Dll[260]{};
	WCHAR x86Dll[260]{};
}HOOK_DLL_PATH, *PHOOK_DLL_PATH;


constexpr ULONG IOCTL_STITCHES_ADD_TRUST_PROCESS	= static_cast<ULONG>(CTL_CODE(FILE_DEVICE_KERNELCODE, 0x800, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS));
constexpr ULONG IOCTL_STITCHES_DEL_TRUST_PROCESS	= static_cast<ULONG>(CTL_CODE(FILE_DEVICE_KERNELCODE, 0x801, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS));
constexpr ULONG IOCTL_STITCHES_ADD_PROTECT_PROCESS	= static_cast<ULONG>(CTL_CODE(FILE_DEVICE_KERNELCODE, 0x802, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS));
constexpr ULONG IOCTL_STITCHES_DEL_PROTECT_PROCESS	= static_cast<ULONG>(CTL_CODE(FILE_DEVICE_KERNELCODE, 0x803, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS));
constexpr ULONG IOCTL_STITCHES_ADD_PROTECT_FILE		= static_cast<ULONG>(CTL_CODE(FILE_DEVICE_KERNELCODE, 0x804, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS));
constexpr ULONG IOCTL_STITCHES_DEL_PROTECT_FILE		= static_cast<ULONG>(CTL_CODE(FILE_DEVICE_KERNELCODE, 0x805, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS));
constexpr ULONG IOCTL_STITCHES_ADD_PROTECT_REGISTRY	= static_cast<ULONG>(CTL_CODE(FILE_DEVICE_KERNELCODE, 0x806, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS));
constexpr ULONG IOCTL_STITCHES_DEL_PROTECT_REGISTRY	= static_cast<ULONG>(CTL_CODE(FILE_DEVICE_KERNELCODE, 0x807, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS));


constexpr ULONG IOCTL_STITCHES_SET_HOOK_DLL_PATH	= static_cast<ULONG>(CTL_CODE(FILE_DEVICE_KERNELCODE, 0x810, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS));